from utils.db.registration import check_register, show_parametrs
from utils.db.schemas.temporary_storage import temp_reg
from utils.rieltor_par import call_data_rieltor
from utils.country_par import call_data_country
from aiogram.dispatcher.filters import Text
from utils.olx_par import call_data_olx
from aiogram import types, executor
from utils.keyboards import *
from config import dp
import time


@dp.message_handler(commands='start')
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫?', reply_markup=keyboard)


@dp.message_handler(commands='help')
async def help(message: types.Message):
    await message.answer_photo(open(r'media\screen\presentation.png', 'rb'), caption='–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é, —è —Ç–≤–æ–π –ø–æ–º–æ—à–Ω–∏–∫ —Å –ø–æ–∏—Å–∫–æ–º –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è,\n—è –∏—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ rieltor.ua | olx.ua | country.ua\n–¥–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ —á—Ç–æ —è —É–º–µ—é')
    time.sleep(1)
    await message.answer_photo(open(r'media\screen\registration.png', 'rb'), caption='–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —è —Ç–µ–±–µ —Å–∞–º –µ—ë –ø—Ä–µ–¥–ª–æ–∂—É –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ')
    time.sleep(1)
    await message.answer_photo(open(r'media\screen\af_registration.png', 'rb'), caption='–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ 2 –∫–Ω–æ–ø–∫–∏: "–∏—Å–∫–∞—Ç—å" - —Å—Ä–∞–∑—É –Ω–∞—á–Ω—ë—Ç –ø–æ–∏—Å–∫ –∑ –∑–∞–¥–∞–Ω–Ω—ã–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏')
    time.sleep(1)
    await message.answer_photo(open(r'media\screen\params.png', 'rb'), caption='–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ø–∞—Ä–∞–º–µ—Ç—Ä—ã" –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏,\n–∞ —Ç–∞–∫–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–∞–∂–∞–≤ –Ω–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä" –∏ —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º')


@dp.message_handler(Text(equals='üõ† –ø–∞—Ä–∞–º–µ—Ç—Ä—ã üõ†'))
async def settings(message: types.Message):
    user = await check_register(message)
    if user:
        await show_parametrs(message, user)


@dp.message_handler(Text(equals='üîé –ò—Å–∫–∞—Ç—å üîç'))
async def search(message: types.Message):

    # –î–æ—Å—Ç–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ë–î
    user_param = await check_register(message)
    if isinstance(user_param, int):
        await message.answer(f'–ó–∞–ø—Ä–æ—Å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞\n–æ—Å—Ç–∞–ª–æ—Å—å <b>{user_param}</b> —Å–µ–∫—É–Ω–¥')
    elif user_param is not None:

        await message.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–∞ üîë Rieltor üîë')

        # –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è RIELTOR
        await call_data_rieltor(message, user_param)

        await message.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–∞ üì¶ OLX üì¶')

        # –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è OLX
        await call_data_olx(message, user_param)

        await message.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–∞ üè† country üè†')

        # –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è country
        await call_data_country(message, user_param)


@dp.message_handler(Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä'))
async def change_parametrs(message: types.Message):
    await message.answer('–í—ã–±–∏—Ä–∏—Ç–µ —á—Ç–æ –º–µ–Ω—è–µ–º:', reply_markup=change_board)
    await temp_reg.choice_param.set()


def main():
    executor.start_polling(dp, skip_updates=True)


if __name__ == '__main__':
    main()
