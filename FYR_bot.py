from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from main import call_data_rieltor,call_data_olx
from aiogram.utils.markdown import hbold, hlink
import environ
import json
import time
env = environ.Env()
env.read_env('.env')

bot = Bot(token=env('TOKEN'),parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = ['üîé –ò—Å–∫–∞—Ç—å üîç']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –∏—Å–∫–∞—Ç—å', reply_markup=keyboard)

@dp.message_handler(Text(equals='üîé –ò—Å–∫–∞—Ç—å üîç'))
async def search(message: types.Message):
    
    ## –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è RIELTOR
    await message.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–∞ üîë Rieltor üîë')
    data_rieltor=call_data_rieltor()

    ## –æ—Ç–≤–µ—Ç —Å rieltor
    for index, item in enumerate(data_rieltor):
        card = f'{hlink(item.get("–ê–¥—Ä–µ—Å"), item.get("–°—Å—ã–ª–∫–∞"))}\n' \
        f'{hbold("–¶–µ–Ω–∞: ")}{item.get("–¶–µ–Ω–∞")}\n' \
        f'{hbold("–†–∞–π–æ–Ω: ")}{item.get("–†–∞–π–æ–Ω")}'
        
        if index%10 == 0:
            time.sleep(3)

        await message.answer(card)
    time.sleep(2)


    ## –∑–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è OLX
    await message.answer('–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–∞ üì¶ OLX üì¶')

    data_olx=call_data_olx()

    if data_olx == 'Old version':
        for num, _ in enumerate(range(2),2):
            if data_olx == 'Old version':
                await message.answer(f'–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OLX ‚Ññ{num}')
                time.sleep(5)
                data_olx=call_data_olx()


    ## –æ—Ç–≤–µ—Ç —Å olx
    if isinstance(data_olx,list):
        for index, item in enumerate(data_olx):
            card = f'{hlink(item.get("–ù–∞–∑–≤–∞–Ω–∏–µ"), item.get("–°—Å—ã–ª–∫–∞"))}\n' \
            f'{hbold("–¶–µ–Ω–∞: ")}{item.get("–¶–µ–Ω–∞")}\n' \
            f'{hbold("–†–∞–π–æ–Ω: ")}{item.get("–†–∞–π–æ–Ω")}'
            
            if index%10 == 0:
                time.sleep(3)

            await message.answer(card)
    else:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å OLX')


def main():
    executor.start_polling(dp,skip_updates=True)

if __name__ == '__main__':
    main()