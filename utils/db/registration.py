from utils.db.schemas.temporary_storage import registration, temp_reg
from aiogram.dispatcher import FSMContext
from utils.db.reg_commands import *
from config import POSTGRES_URI
from utils.keyboards import *
from utils.db.dbb import db
from aiogram import types
from utils.check import *
from config import dp
import traceback


async def check_register(message: types.Message):
    try:
        await db.set_bind(POSTGRES_URI)
        user = await select_user(message.from_user.id)
        if not user:
            await message.answer('–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥—ë–º –º–∞–ª–µ–Ω—å–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚ò∫Ô∏è', reply_markup=city_key)
            await start_reg(message)
        else:
            if check_time(user.time):
                return (user, None)
            time = user.time - datetime.now()
            return (user, int(time.seconds))
    except:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', traceback.format_exc())


async def start_reg(message: types.Message):
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Å–∫–∞—Ç—å', reply_markup=city_key)
    await registration.city.set()


async def show_parametrs(message: types.Message, user):
    await message.answer(f'üõ† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã üõ†:\n'
                         f'\n<b>–ì–æ—Ä–æ–¥</b> - {user.city if user.city is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                         f'\n<b>–ú–∏–Ω. —Ü–µ–Ω–∞</b> - {str(user.min_price) + " –≥—Ä–Ω" if user.min_price is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                         f'\n<b>–ú–∞–∫—Å. —Ü–µ–Ω–∞</b> - {str(user.max_price) + " –≥—Ä–Ω" if user.max_price is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                         f'\n<b>–ö–æ–ª. –∫–æ–º–Ω–∞—Ç</b> - {user.count_rooms if user.count_rooms is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                         f'\n<b>–ú–∏–Ω. —ç—Ç–∞–∂</b> - {user.min_floor if user.min_floor is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                         f'\n<b>–ú–∞–∫—Å. —ç—Ç–∞–∂</b> - {user.max_floor if user.max_floor is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n'
                         f'\n<b>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</b> - {user.sort if user.sort is not None else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n', reply_markup=view_param)


@dp.message_handler(state=temp_reg.choice_param)
async def single_change(message: types.Message, state: FSMContext):
    await db.set_bind(POSTGRES_URI)
    user = await select_user(message.from_user.id)
    data = {'–ì–æ—Ä–æ–¥': 'city', '–ö–æ–ª. –∫–æ–º–Ω–∞—Ç': 'count_rooms',
            '–ú–∏–Ω. —Ü–µ–Ω–∞': 'min_price', '–ú–∞–∫—Å. —Ü–µ–Ω–∞': 'max_price', '–ú–∏–Ω. —ç—Ç–∞–∂': 'min_floor', '–ú–∞–∫—Å. —ç—Ç–∞–∂': 'max_floor', '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞': 'sort'}
    data_2 = {'city': [user.city, city_key],
              'min_price': [user.min_price, price_n_key],
              'max_price': [user.max_price, price_x_key],
              'count_rooms': [user.count_rooms, room_key],
              'min_floor': [user.min_floor, floor_n_key],
              'max_floor': [user.max_floor, floor_x_key],
              'sort': [user.sort, sort_key]}
    param = data.get(message.text)

    if message.text == '–û—Ç–º–µ–Ω–∞':
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard)
        await state.update_data(choice_param=None)
        await state.finish()
    elif param:
        await message.answer(f'–ú–µ–Ω—è–µ–º {message.text} - <b>{data_2[param][0]}</b> –Ω–∞:', reply_markup=data_2[param][1])
        await state.update_data(choice_param=param)
        await temp_reg.param.set()


@dp.message_handler(state=temp_reg.param)
async def single_change_2(message: types.Message, state: FSMContext):
    await state.update_data(param=message.text)
    data = await state.get_data()
    try:
        if data['choice_param'] == 'city':
            if data['param'] == '–ü—Ä–æ–ø—É—Å–∫':
                await update_user_c(message.from_user.id, None)
            elif check_city(data['param']):
                await update_user_c(message.from_user.id, data['param'])
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá', reply_markup=city_key)
                return
            await state.finish()
        elif data['choice_param'] == 'min_price':
            if data['param'] == '–ü—Ä–æ–ø—É—Å–∫':
                await update_user_n_p(message.from_user.id, None)
            elif check_num(data['param']):
                await update_user_n_p(message.from_user.id, int("".join(data['param'].replace('.', ''))))
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ', reply_markup=price_n_key)
                return
            await state.finish()
        elif data['choice_param'] == 'max_price':
            if data['param'] == '–ü—Ä–æ–ø—É—Å–∫':
                await update_user_x_p(message.from_user.id, None)
            elif check_num(data['param']):
                if await update_user_x_p(message.from_user.id, int("".join(data['param'].replace('.', '')))):
                    pass
                else:
                    await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ', reply_markup=price_x_key)
                    return
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ', reply_markup=price_x_key)
                return
            await state.finish()
        elif data['choice_param'] == 'count_rooms':
            if data['param'] == '–ü—Ä–æ–ø—É—Å–∫':
                await update_user_c_r(message.from_user.id, None)
            elif check_c_room(data['param']):
                await update_user_c_r(message.from_user.id, data['param'])
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', reply_markup=room_key)
                return
            await state.finish()
        elif data['choice_param'] == 'min_floor':
            if data['param'] == '–ü—Ä–æ–ø—É—Å–∫':
                await update_user_n_f(message.from_user.id, None)
            elif check_num(data['param']) and check_floor(data['param']):
                await update_user_n_f(message.from_user.id, int(data['param']))
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ', reply_markup=floor_n_key)
                return
            await state.finish()
        elif data['choice_param'] == 'max_floor':
            if data['param'] == '–ü—Ä–æ–ø—É—Å–∫':
                await update_user_x_f(message.from_user.id, None)
            elif check_num(data['param']) and check_floor(data['param']):
                if await update_user_x_f(message.from_user.id, int(data['param'])):
                    pass
                else:
                    await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ', reply_markup=floor_x_key)
                    return
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ', reply_markup=floor_x_key)
                return
            await state.finish()
        elif data['choice_param'] == 'sort':
            if data['param'] == '–ü—Ä–æ–ø—É—Å–∫':
                await update_user_s(message.from_user.id, None)
            elif check_sort(data['param']):
                await update_user_s(message.from_user.id, data['param'])
            else:
                await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É', reply_markup=sort_key)
                return
            await state.finish()
    except:
        await message.answer('–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', traceback.format_exc())
        await state.finish()
        return

    await message.answer('‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! ‚úÖ', reply_markup=keyboard)


@dp.message_handler(state=registration.city)
async def get_city(message: types.Message, state: FSMContext):

    if check_city(message.text):
        await state.update_data(city=message.text)
        await message.answer(f'–ü—Ä–∏–Ω—è–ª, –±—É–¥—É –∏—Å–∫–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–µ <b>{message.text}</b>.\n–£–∫–∞–∂–∏—Ç–µ <b>–æ—Ç</b> –∫–∞–∫–æ–π —Å—É–º–º—ã –∏—Å–∫–∞—Ç—å', reply_markup=price_n_key)
        await registration.min_price.set()
    else:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá')


@dp.message_handler(state=registration.min_price)
async def get_min_price(message: types.Message, state: FSMContext):

    try:
        if message.text == '–ü—Ä–æ–ø—É—Å–∫':
            await message.answer('–û–∫–µ–π, –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω–∞.\n–£–∫–∞–∂–∏—Ç–µ <b>–¥–æ</b> –∫–∞–∫–æ–π —Å—É–º–º—ã –∏—Å–∫–∞—Ç—å', reply_markup=price_x_key)
            await state.update_data(min_price=None)
            await registration.max_price.set()
        else:
            if check_num(message.text):
                num = int("".join(message.text.replace('.', '')))
                if num < 2000 or num > 50000:
                    await message.answer('–û—à–∏–±–∫–∞\n–ß–∏—Å–ª–æ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞', reply_markup=price_n_key)
                else:
                    await state.update_data(min_price=num)
                    await message.answer(f'–ü—Ä–∏–Ω—è–ª, –±—É–¥—É –∏—Å–∫–∞—Ç—å –æ—Ç <b>{message.text}</b> –≥—Ä–Ω.\n–£–∫–∞–∂–∏—Ç–µ <b>–¥–æ</b> –∫–∞–∫–æ–π —Å—É–º–º—ã –∏—Å–∫–∞—Ç—å', reply_markup=price_x_key)
                    await registration.max_price.set()
            else:
                await message.answer('–û—à–∏–±–∫–∞\n–í–≤–µ–¥–µ–Ω–Ω–æ –Ω–µ —á–∏—Å–ª–æ', reply_markup=price_n_key)
    except Exception:
        await message.answer('–û—à–∏–±–∫–∞\n–í–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')


@dp.message_handler(state=registration.max_price)
async def get_max_price(message: types.Message, state: FSMContext):

    try:
        if message.text == '–ü—Ä–æ–ø—É—Å–∫':
            await message.answer('–û–∫–µ–π, –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –≤–∞–∂–Ω–∞.\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', reply_markup=room_key)
            await state.update_data(max_price=None)
            await registration.count_rooms.set()
        else:
            if check_num(message.text):
                num = int("".join(message.text.replace('.', '')))
                if num < 2000 and num > 60000:
                    await message.answer('–û—à–∏–±–∫–∞\n–ß–∏—Å–ª–∞ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞', reply_markup=price_x_key)
                else:
                    data = await state.get_data()
                    if check_max_min(num, data.get('min_price')):
                        await state.update_data(max_price=num)
                        await message.answer(f'–ü—Ä–∏–Ω—è–ª, –±—É–¥—É –∏—Å–∫–∞—Ç—å –∫–≤–∞—Ä–∏—Ç–∏—Ä—ã –¥–æ <b>{message.text}</b> –≥—Ä–Ω.\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç', reply_markup=room_key)
                        await registration.count_rooms.set()
                    else:
                        await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ', reply_markup=price_x_key)
            else:
                await message.answer('–û—à–∏–±–∫–∞\n–í–≤–µ–¥–µ–Ω–Ω–æ –Ω–µ —á–∏—Å–ª–æ', reply_markup=price_x_key)
    except Exception:
        await message.answer('–û—à–∏–±–∫–∞\n–í–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', traceback.format_exc())


@dp.message_handler(state=registration.count_rooms)
async def get_count_rooms(message: types.Message, state: FSMContext):
    try:
        if message.text == '–ü—Ä–æ–ø—É—Å–∫':
            await message.answer('–û–∫–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –Ω–µ –≤–∞–∂–Ω–æ.\n–£–∫–∞–∂–∏—Ç–µ <b>—Å</b> –∫–∞–∫–æ–≥–æ —ç—Ç–∞–∂–∞ –∏—Å–∫–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–ª–∏ –≤–≤–µ–¥—è –≤—Ä—É—á–Ω—É—é –Ω–æ –Ω–µ –≤—ã—à–µ <b>20</b> —ç—Ç–∞–∂–∞', reply_markup=floor_n_key)
            await state.update_data(count_rooms=None)
            await registration.min_floor.set()
        else:
            if check_c_room(message.text):
                await state.update_data(count_rooms=message.text)
                await message.answer(f'–ü—Ä–∏–Ω—è–ª, –±—É–¥—É –∏—Å–∫–∞—Ç—å {message.text}-—Ö –∫–æ–º–Ω–∞—Ç—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É\n–£–∫–∞–∂–∏—Ç–µ <b>—Å</b> –∫–∞–∫–æ–≥–æ —ç—Ç–∞–∂–∞ –∏—Å–∫–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏–ª–∏ –≤–≤–µ–¥—è –≤—Ä—É—á–Ω—É—é –Ω–æ –Ω–µ –≤—ã—à–µ <b>20</b> —ç—Ç–∞–∂–∞', reply_markup=floor_n_key)
                await registration.min_floor.set()
            else:
                await message.answer('–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ', reply_markup=room_key)
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç')


@dp.message_handler(state=registration.min_floor)
async def get_min_floor(message: types.Message, state: FSMContext):

    try:
        if message.text == '–ü—Ä–æ–ø—É—Å–∫':
            await message.answer('–û–∫–µ–π, —Å –∫–∞–∫–æ–≥–æ —ç—Ç–∞–∂–∞ –∏—Å–∫–∞—Ç—å –Ω–µ –≤–∞–∂–Ω–æ.\n–£–∫–∞–∂–∏—Ç–µ <b>–¥–æ</b> –∫–∞–∫–æ–≥–æ —ç—Ç–∞–∂–∞ –∏—Å–∫–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É', reply_markup=floor_x_key)
            await state.update_data(min_floor=None)
            await registration.max_floor.set()
        else:
            if check_floor(message.text):
                await state.update_data(min_floor=int(message.text))
                await message.answer(f'–ü—Ä–∏–Ω—è–ª, –±—É–¥—É –∏—Å–∫–∞—Ç—å —Å {message.text} —ç—Ç–∞–∂–∞.\n–£–∫–∞–∂–∏—Ç–µ <b>–¥–æ</b> –∫–∞–∫–æ–≥–æ —ç—Ç–∞–∂–∞ –∏—Å–∫–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É', reply_markup=floor_x_key)
                await registration.max_floor.set()
            else:
                await message.answer('–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–∞–∂\n—É–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂ –æ—Ç 1 –¥–æ 20 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ')
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —ç—Ç–∞–∂–∞')


@dp.message_handler(state=registration.max_floor)
async def get_max_floor(message: types.Message, state: FSMContext):

    try:
        if message.text == '–ü—Ä–æ–ø—É—Å–∫':
            await message.answer('–û–∫–µ–π, <b>–¥–æ</b> –∫–∞–∫–æ–≥–æ —ç—Ç–∞–∂–∞ –∏—Å–∫–∞—Ç—å –Ω–µ –≤–∞–∂–Ω–æ.\n–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup=sort_key)
            await state.update_data(max_floor=None)
            await registration.sort.set()
        else:
            if check_floor(message.text):
                data = await state.get_data()
                if check_max_min(int(message.text), data.get('min_floor')):
                    await state.update_data(max_floor=int(message.text))
                    await message.answer(f'–ü—Ä–∏–Ω—è–ª, –±—É–¥—É –∏—Å–∫–∞—Ç—å –¥–æ {message.text} —ç—Ç–∞–∂–∞.\n–£–∫–∞–∂–∏—Ç–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π', reply_markup=sort_key)
                    await registration.sort.set()
                else:
                    await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ', reply_markup=floor_x_key)
            else:
                await message.answer('–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–∞–∂\n—É–∫–∞–∂–∏—Ç–µ —ç—Ç–∞–∂ –æ—Ç 1 –¥–æ 20 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ', reply_markup=floor_x_key)
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —ç—Ç–∞–∂–∞')


@dp.message_handler(state=registration.sort)
async def get_sort(message: types.Message, state: FSMContext):

    try:
        if message.text == '–ü—Ä–æ–ø—É—Å–∫':
            await message.answer('–û–∫–µ–π, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É', reply_markup=keyboard)
            await state.update_data(sort=None)
        elif check_sort(message.text):
            await state.update_data(sort=message.text)
            await message.answer(f'–ü—Ä–∏–Ω—è–ª, –±—É–¥—É –∏—Å–∫–∞—Ç—å –ø–æ {message.text}', reply_markup=keyboard)
        else:
            await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∏–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.\n–í—ã–±–∏—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º', reply_markup=sort_key)
            return
        data = await state.get_data()
        if await add_user(message.from_user.id, data.get('city'), data.get('min_price'), data.get('max_price'), data.get('count_rooms'), data.get('min_floor'), data.get('max_floor'), data.get('sort')):
            await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ‚úÖ', reply_markup=keyboard)
            await state.finish()
        else:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', reply_markup=keyboard)

    except Exception:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n', traceback.format_exc())
