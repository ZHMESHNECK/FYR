from selenium.webdriver.firefox.options import Options
from selenium.common.exceptions import TimeoutException
from aiogram.utils.markdown import hbold, hlink
from config import city, sort, fake_user, osp
from selenium import webdriver
from bs4 import BeautifulSoup
from aiogram import types
from random import choice
import asyncio
import logging
import environ
import time


env = environ.Env()
env.read_env('.env')


async def call_data_olx(message: types.Message, user_param):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç firefox
    –ø–∞—Ä—Å–∏—Ç olx
    –∑–∞–∫—Ä—ã–≤–∞–µ—Ç firefox
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ (max - 8 –æ–±—ä—è–≤–ª–µ–Ω–∏–π) –≤ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É
    –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ -  time.sleep(2)

    Args:
        message (types.Message): —Å–æ–æ–±—â–∑–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_param (_type_): –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —é–∑–µ—Ä–∞ —Å –ë–î
    """
    try:
        options = Options()
        options.set_preference("general.useragent.override",
                               f'{choice(fake_user)}')
        options.add_argument('--headless')

        if "Windows" in osp:
            # –ø—É—Ç—å –∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –±—Ä–∞—É–∑–µ—Ä–∞ ( —Ç–∞–º –∂–µ —É –º–µ–Ω—è –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω geckodriver )
            options.binary_location = env('WINDOWS')
            driver = webdriver.Firefox(options=options)
        elif "Linux" in osp:
            # –ø—É—Ç—å –∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –±—Ä–∞—É–∑–µ—Ä–∞
            options.binary_location = env('LINUX')
            # –ø—É—Å—Ç—å –∫ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é geckodriver
            driver = webdriver.Firefox(
                executable_path=env('LINUX_DRIVER'), options=options)

        room = ['odnokomnatnye', 'dvuhkomnatnye', 'trehkomnatnye']
        parametrs = {
            'rooms': "&".join([f'search[filter_enum_number_of_rooms_string][{num}]={room[int(rom)-1]}' for num, rom in enumerate(list(map(int, user_param.count_rooms.replace('-', ''))))]) if user_param.count_rooms is not None else "",
            'price_min': f'&search[filter_float_price:from]={user_param.min_price}' if user_param.min_price is not None else "",
            'price_max': f'&search[filter_float_price:to]={user_param.max_price}' if user_param.max_price is not None else "",
            'city': city[user_param.city][0],
            'floor_min': f'&search[filter_float_floor:from]={user_param.min_floor}' if user_param.min_floor is not None else "",
            'floor_max': f'&search[filter_float_floor:to]={user_param.max_floor}' if user_param.max_floor is not None else "",
            'sort': f'&search[order]={sort[user_param.sort][0]}' if user_param.sort is not None else sort['–ü—Ä–æ–ø—É—Å–∫'][0]
        }
        gen_of_link = f'{parametrs["rooms"]}{parametrs["price_min"]}{parametrs["price_max"]}{parametrs["floor_min"]}{parametrs["floor_max"]}{parametrs["sort"]}'

        url = f'https://www.olx.ua/uk/nedvizhimost/kvartiry/dolgosrochnaya-arenda-kvartir/{parametrs["city"]}/?{gen_of_link}'

        # —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
        data_olx = []

        # –ß–∏—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É olx
        driver.get(url=url)

        # –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        soup = BeautifulSoup(driver.page_source, 'lxml')
        mdiv = soup.find_all('div', class_='css-1sw7q4x')

    except (Exception, TimeoutException):
        logging.error('call_data_olx - driver', exc_info=True)
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å OLX')
        return

    finally:
        if 'driver' in locals():
            driver.close()
            driver.quit()

    if len(mdiv) == 0 or soup.find(string='–ú–∏ –∑–Ω–∞–π—à–ª–∏ 0 –æ–≥–æ–ª–æ—à–µ–Ω—å') is not None:
        await message.answer('–ó–∞ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòÖ\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
        return
    else:
        sps = mdiv

    try:
        for div in sps:
            # –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if not div.find('div', class_='css-1jh69qu'):
                try:
                    price = div.find('p', {'data-testid': 'ad-price'}).text
                except:
                    price = 'No price'
                try:
                    addres = div.find(
                        'div', class_="css-u2ayx9").find('h6').text
                except:
                    addres = 'No address'
                try:
                    link = div.find('a').get('href')
                except:
                    link = 'No url'
                try:
                    area = div.find(
                        'p', {'data-testid': 'location-date'}).text.split('-')
                except:
                    area = 'No area'

                if link != 'No url':
                    data_olx.append(
                        {
                            "–¶–µ–Ω–∞": price,
                            "–†–∞–π–æ–Ω": area[0],
                            "–ù–∞–∑–≤–∞–Ω–∏–µ": addres,
                            "–°—Å—ã–ª–∫–∞": f'https://www.olx.ua{link}',
                        }
                    )

                # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±–æ–ª—å—à–µ 8 - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                if len(data_olx) == 8:
                    break

        # –æ—Ç–≤–µ—Ç —Å olx
        if isinstance(data_olx, list):
            for item in data_olx:
                card = f'{hlink(item.get("–ù–∞–∑–≤–∞–Ω–∏–µ"), item.get("–°—Å—ã–ª–∫–∞"))}\n' \
                    f'{hbold("–¶–µ–Ω–∞: ")}{item.get("–¶–µ–Ω–∞")}\n' \
                    f'{hbold("–†–∞–π–æ–Ω: ")}{item.get("–†–∞–π–æ–Ω")}'

                await message.answer(card)
        time.sleep(2)
    except:
        logging.error('call_data_olx', exc_info=True)
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å OLX')
