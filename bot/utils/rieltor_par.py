from config import city, rielt_room, rielt_rooms, sort, fake_user
from aiogram.utils.markdown import hbold, hlink
from bs4 import BeautifulSoup
from aiogram import types
from random import choice
import requests
import time


async def call_data_rieltor(message: types.Message, user_param):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ø–∞—Ä—Å–∏—Ç —Å–∞–π—Ç rieltor.ua
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ (max - 8 –æ–±—ä—è–≤–ª–µ–Ω–∏–π) –≤ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É
    –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ - time.sleep(2)

    Args:
        message (types.Message): —Å–æ–æ–±—â–∑–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_param (_type_): –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —é–∑–µ—Ä–∞ —Å –ë–î
    """

    ua = choice(fake_user)

    parametrs = {
        'rooms': '',
        'price_min': f'&price_min={user_param.min_price}' if user_param.min_price is not None else "",
        'price_max': f'&price_max={user_param.max_price}' if user_param.max_price is not None else "",
        'city': city[user_param.city][1],
        'floor_min': f'&floor_min={user_param.min_floor}' if user_param.min_floor is not None else "",
        'floor_max': f'&floor_max={user_param.max_floor}' if user_param.max_floor is not None else "",
        'sort': f'&sort={sort[user_param.sort][1]}' if user_param.sort is not None else sort['–ü—Ä–æ–ø—É—Å–∫'][1]
    }

    count_rooms = list(map(int, user_param.count_rooms.replace(
        '-', ''))) if user_param.count_rooms is not None else ""
    if len(count_rooms) == 1:
        parametrs['rooms'] = f'{rielt_room[int(user_param.count_rooms)-1]}/?'
    elif len(count_rooms) > 1:
        list_of_room = []
        for i in count_rooms:
            list_of_room.append(rielt_rooms[int(i)-1])
        parametrs['rooms'] = '?' + '&'.join(list_of_room)

    gen_of_link = f'{parametrs["rooms"]}{parametrs["price_min"]}{parametrs["price_max"]}{parametrs["floor_min"]}{parametrs["floor_max"]}{parametrs["sort"]}'

    url = f'https://rieltor.ua/{parametrs["city"]}/flats-rent/{gen_of_link}'

    data_rieltor = []

    response = requests.get(
        url=url,
        headers={'user-agent': ua},
    )
    try:

        soup = BeautifulSoup(response.text, 'lxml')

        # –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        mdiv = soup.find_all(class_='catalog-card')

        dublicate = []

        if len(mdiv) == 0 or soup.find("div", class_='sort-wrap catalog-sort-wrap catalog-sort-wrap-pc').find('span').get_text().strip() == '–ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ':
            await message.answer('–ó–∞ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòÖ\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
            return
        else:
            sps = mdiv

        for div in sps:
            try:
                price = div.find(
                    'div', class_='catalog-card-price').text.strip()
            except:
                price = 'No price'
            try:
                addres = div.find('div', class_="catalog-card-address").text
            except:
                addres = 'No address'
            try:
                link = div.find('a', class_='catalog-card-media').get('href')
            except:
                link = 'No link'
            try:
                area = div.find(
                    'div', class_='catalog-card-region').find_all('a')[1].text.strip()
            except:
                area = 'No area'

            if addres not in dublicate:
                data_rieltor.append(
                    {
                        "–¶–µ–Ω–∞": price,
                        "–†–∞–π–æ–Ω": area,
                        "–ê–¥—Ä–µ—Å": addres,
                        "–°—Å—ã–ª–∫–∞": link
                    }
                )
                dublicate.append(addres)

            if len(data_rieltor) == 8:
                break

        for item in data_rieltor:
            card = f'{hlink(item.get("–ê–¥—Ä–µ—Å"), item.get("–°—Å—ã–ª–∫–∞"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: ")}{item.get("–¶–µ–Ω–∞")}\n' \
                f'{hbold("–†–∞–π–æ–Ω: ")}{item.get("–†–∞–π–æ–Ω")}'

            await message.answer(card)

        time.sleep(2)
    except:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å rieltor.ua')
