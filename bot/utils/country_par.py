from aiogram.utils.markdown import hbold, hlink
from config import city, country_rooms, sort, fake_user
from bs4 import BeautifulSoup
from random import choice
from aiogram import types
import traceback
import requests


async def call_data_country(message: types.Message, user_param):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ø–∞—Ä—Å–∏—Ç —Å–∞–π—Ç country.ua
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ (max - 8 –æ–±—ä—è–≤–ª–µ–Ω–∏–π) –≤ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä—É

    Args:
        message (types.Message): —Å–æ–æ–±—â–∑–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_param (_type_): –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —é–∑–µ—Ä–∞ —Å –ë–î
    """

    ua = choice(fake_user)

    parametrs = {
        'rooms':  '',
        'price_min': f'&price_from={user_param.min_price}' if user_param.min_price is not None else "",
        'price_max': f'&price_to={user_param.max_price}' if user_param.max_price is not None else "",
        'city': f'&city_id={city[user_param.city][2]}',
        'floor_min': f'&floor_from={user_param.min_floor}' if user_param.min_floor is not None else "",
        'floor_max': f'&floor_to={user_param.max_floor}' if user_param.max_floor is not None else "",
        'sort': f'&price_sort={sort[user_param.sort][2]}' if user_param.sort is not None else f"&price_sort={sort['–ü—Ä–æ–ø—É—Å–∫'][2]}"
    }

    count_rooms = list(user_param.count_rooms.replace(
        '-', '')) if user_param.count_rooms is not None else ""
    if len(count_rooms) == 1:
        parametrs['rooms'] = f'&rooms_id={user_param.count_rooms}&rooms_url={user_param.count_rooms}'
    elif len(count_rooms) > 1:
        parametrs['rooms'] = f'&rooms_id={country_rooms[",".join(count_rooms)]}&rooms_url={country_rooms[",".join(count_rooms)]}'

    gen_of_link = f'{parametrs["rooms"]}{parametrs["price_min"]}{parametrs["price_max"]}{parametrs["floor_min"]}{parametrs["floor_max"]}{parametrs["sort"]}{parametrs["city"]}'

    url = f'https://www.country.ua/list/?action_id=2&action_url=rent&type_id=1&type_url=flat{gen_of_link}&filter_flat_type_id=1&filter_flat_type_url=flat&price_currency=uah'

    response = requests.get(
        url=url,
        headers={'user-agent': ua},
    )

    # —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    data_country = []

    try:
        soup = BeautifulSoup(response.text, 'lxml')

        # –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        mdiv = soup.find_all(
            class_='catalog__item item-catalog item-catalog_top')

        if len(mdiv) == 0 or soup.find(string='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.') is not None:
            await message.answer('–ó–∞ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòÖ\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
            return
        else:
            sps = mdiv

        for div in sps:
            # –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            if not div.find('div', class_='item-catalog__label item-catalog__label_orange'):
                try:
                    price = div.find('div', class_='item-catalog__price').text
                except:
                    price = '–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                try:
                    addres = div.find(
                        'div', class_='item-catalog__address address')
                except:
                    addres = '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'

                try:
                    link = div.find(
                        'div', class_='item-catalog__text').find('a').get('href')
                except:
                    link = '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'

                data_country.append(
                    {
                        "–ê–¥—Ä–µ—Å": addres.text.replace('\xa0', ''),
                        "–¶–µ–Ω–∞": price,
                        "–°—Å—ã–ª–∫–∞": 'https://www.country.ua'+link
                    })

                # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±–æ–ª—å—à–µ 8 - –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                if len(data_country) == 8:
                    break

        # –æ—Ç–≤–µ—Ç —Å country
        for item in data_country:
            card = f'{hlink(item.get("–ê–¥—Ä–µ—Å"), item.get("–°—Å—ã–ª–∫–∞"))}\n' \
                f'{hbold("–¶–µ–Ω–∞: ")}{item.get("–¶–µ–Ω–∞")}\n'

            await message.answer(card)
    except:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å country.ua', traceback.format_exc())
